type File @model {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type Chatroom @model {
  id: ID! @isUnique
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User @relation(name: "UserCreatedChatrooms")
  users: [User!]! @relation(name: "UsersChatrooms")
  messages: [Message!]! @relation(name: "ChatroomMessages")
  stateType: Int! @defaultValue(value: 0)
  numReported: Int! @defaultValue(value: 0)
  lastInvitedAt: DateTime
  invitedUser: User @relation(name: "UserInvitedChatroom")
  latestMessagesAt: DateTime!
  deniedByUserIds: [String!] @defaultValue(value: "[]")
  savedByUsers: [User!]! @relation(name: "UserSavedChatrooms")

  # Estimated messages count*
  # Graphcool doesn't support sort by aggregation (_allMessagesMeta) yet, 
  # so we need to store count in order to sort them (e.g. top 100)

  # this will get updated at the same time as one of the user submit new message (to save # of requests to the server)
  # The 'estimatedCount' is directly retrieved from the current local cache of messages in that room +1 
  # (which won't reflect the actual count, e.g, but close enough).

  # A better (but additional request) would be to query the count first, +1, then update, but that's 2 requests per new message
  estimatedMessagesCount: Int! @defaultValue(value: 0) @migrationValue(value: 0)
}

type Message @model {
  id: ID! @isUnique
  createdAt: DateTime!
  text: String!
  chatroom: Chatroom! @relation(name: "ChatroomMessages")
  createdByUserId: String!
}

type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String! @isUnique
  password: String!
  username: String! @isUnique
  chatrooms: [Chatroom!]! @relation(name: "UsersChatrooms")
  createdChatrooms: [Chatroom!]! @relation(name: "UserCreatedChatrooms")
  invitedChatrooms: [Chatroom!]! @relation(name: "UserInvitedChatroom")
  numberOfTopicsLeft: Int! @defaultValue(value: 0)

  isAccountVerified: Boolean! @defaultValue(value: false)
  verificationCode: String @isUnique
  savedChatrooms: [Chatroom!]! @relation(name: "UserSavedChatrooms")
}



# added by mailgun template: (please uncomment)
# 

